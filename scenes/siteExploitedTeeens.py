import re
from tpdb.BaseSceneScraper import BaseSceneScraper
from tpdb.items import SceneItem


class SiteExploitedTeensSpider(BaseSceneScraper):
    name = 'ExploitedTeens'
    network = 'Exploited Teens'
    parent = 'Exploited Teens'
    site = 'Exploited Teens'

    start_urls = [
        'https://www.exploitedteens.com',
    ]

    selector_map = {
        'external_id': r'',
        'pagination': '/page%s.html'
    }

    def get_scenes(self, response):
        # ~ print(response.text)
        print("Stub Scraper, no longer used.  Now pulled from StashDB instead")
        scenes = response.xpath('//video/ancestor::div[contains(@class, "col-lg-4")]')
        yield None
        # ~ for scene in scenes:
            # ~ item = self.init_scene()
            # ~ title = scene.xpath('.//div[contains(@class, "p-2")]/p[contains(text(), "Age:")]//text()').getall()
            # ~ title = self.cleanup_title(" ".join(title).replace("  ", " ").strip())
            # ~ item['title'] = title
            # ~ item['description'] = scene.xpath('.//p[contains(@class, "video-desc")]/text()').get().replace('\n', '').replace('\t', '').replace('\r', '')
            # ~ item['image'] = self.format_link(response, scene.xpath('.//video/@poster').get())
            # ~ item['image_blob'] = self.get_image_blob_from_link(item['image'])
            # ~ item['performers'] = []
            # ~ item['tags'] = ['18+ Teens', 'Teen']
            # ~ item['trailer'] = self.format_link(response, scene.xpath('.//source/@src').get())
            # ~ item['id'] = re.search(r'scenes/(.*?)/', item['image']).group(1)
            # ~ item['url'] = response.url
            # ~ item['network'] = "Exploited Teens"
            # ~ item['parent'] = "Exploited Teens"
            # ~ item['site'] = "Exploited Teens"

            # ~ yield self.check_item(item, self.days)
